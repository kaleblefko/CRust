/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 * 
 * Author: Naga Kandasamy
 * Date created: July 12, 2020

 * Student name(s): Kaleb Lefkowitz
 * Date modified: 10/12/2023
 *
 * Notes: Hardware project from the book "The Elements of Computing Systems" by Nisan and Schocken, MIT Press.
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    /* Implementation tip: A larger RAM unit can be built by grouping smaller RAM-parts together.
       Think about the RAMâ€™s address input as consisting of two fields: 
       one field can be used to select a RAM-part;
       the other field can be used to select a register within that RAM-part
       Use mux/demux logic to effect this addressing scheme.
*/
    PARTS:
    // TODO: complete your implementation of RAM64.
    DMux(in=load, sel=address[5], a=tempload0, b=tempload1);
    DMux4Way(in = tempload0, sel = address[3..4], a = load0, b = load1, c = load2, d = load3);
    DMux4Way(in = tempload1, sel = address[3..4], a = load4, b = load5, c = load6, d = load7);

    RAM8(in=in, load=load0, address=address[0..2], out=out0);
    RAM8(in=in, load=load1, address=address[0..2], out=out1);
    RAM8(in=in, load=load2, address=address[0..2], out=out2);
    RAM8(in=in, load=load3, address=address[0..2], out=out3);
    RAM8(in=in, load=load4, address=address[0..2], out=out4);
    RAM8(in=in, load=load5, address=address[0..2], out=out5);
    RAM8(in=in, load=load6, address=address[0..2], out=out6);
    RAM8(in=in, load=load7, address=address[0..2], out=out7);

    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[3..5], out=out);
}