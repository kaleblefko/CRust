/**
 * 16-bit Hack ALU from the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * 
 * The ALU computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * 
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 * 
 * Implementation: the ALU logic manipulates the x and y inputs
 * and operates on the resulting values, as follows:
 * if (zx == 1) set x = 0        // 16-bit constant
 * if (nx == 1) set x = !x       // bitwise not
 * if (zy == 1) set y = 0        // 16-bit constant
 * if (ny == 1) set y = !y       // bitwise not
 * if (f == 1)  set out = x + y  // integer 2's complement addition
 * if (f == 0)  set out = x & y  // bitwise and
 * if (no == 1) set out = !out   // bitwise not
 * if (out == 0) set zr = 1
 * if (out < 0) set ng = 1
 * 
 * Author: Naga Kandasamy
 * Date created: July 10, 2020
 * Date modified: October 11, 2023
 * 
 * Name of student: 
 * Date modified: 
*/

CHIP ALU {
    IN  
        x[16], y[16],       // 16-bit inputs        
        zx,                 // zero the x input?
        nx,                 // negate the x input?
        zy,                 // zero the y input?
        ny,                 // negate the y input?
        f,                  // compute out = x + y (if 1) or x & y (if 0)
        no;                 // negate the out output?

    OUT 
        out[16],            // 16-bit output
        zr,                 // 1 if (out == 0), 0 otherwise
        ng;                 // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a = x, b = false, sel = zx, out = zdx);
    Not16(in = zdx, out = notzdx);
    Mux16(a = zdx, b = notzdx, sel = nx, out = xdata);
    Mux16(a = y, b = false, sel = zy, out = zdy);
    Not16(in = zdy, out = notzdy);
    Mux16(a = zdy, b = notzdy, sel = ny, out = ydata);

    And16(a = xdata, b = ydata, out = logicout);
    Add16(a = xdata, b = ydata, out = arithout);
    Mux16(a = logicout, b = arithout, sel = f, out = presetout);
    Not16(in = presetout, out = notpresetout);
    Mux16(a = presetout, b = notpresetout, sel = no, out = out, out[0..7] = iszero1, out[8..15]=iszero2, out[15] = ng);

    Or8Way(in = iszero1, out = o0);
    Or8Way(in = iszero2, out = o1);
    Or(a = o0, b = o1, out = o);
    Not(in = o, out = zr);
}